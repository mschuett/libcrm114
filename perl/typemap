CRM114_CONTROLBLOCK *				T_PTROBJ
CRM114_DATABLOCK *				T_PTROBJ
CRM114_DATABLOCK **				T_PTROBJ
CRM114_ERR					T_PTROBJ
CRM114_MATCHRESULT *				T_PTROBJ
__off_t						T_PTROBJ
__va_list					T_PTROBJ
const CRM114_CONTROLBLOCK *			T_PTROBJ
const CRM114_DATABLOCK *			T_PTROBJ
const CRM114_MATCHRESULT *			T_PTROBJ
const char *					T_PTROBJ
const fpos_t *					T_PTROBJ
const void *					T_PTROBJ
fpos_t ( * ) ( void *, fpos_t, int )		T_PTROBJ
fpos_t *					T_PTROBJ
int ( * ) ( void * )				T_PTROBJ
int ( * ) ( void *, char *, int )		T_PTROBJ
int ( * ) ( void *, const char *, int )		T_PTROBJ
int *						T_PTROBJ
long *						T_PTROBJ
size_t *					T_PTROBJ
struct crm114_feature_row			T_OPAQUE_STRUCT
unsigned long long				T_NV
#############################################################################
INPUT
T_OPAQUE_STRUCT
	if (sv_derived_from($arg, \"${ntype}\")) {
	    STRLEN len;
	    char  *s = SvPV((SV*)SvRV($arg), len);

	    if (len != sizeof($var))
		croak(\"Size %d of packed data != expected %d\",
			len, sizeof($var));
	    $var = *($type *)s;
	}
	else
	    croak(\"$var is not of type ${ntype}\")
#############################################################################
OUTPUT
T_OPAQUE_STRUCT
	sv_setref_pvn($arg, \"${ntype}\", (char *)&$var, sizeof($var));
